#+TITLE: Alternative approaches to scRNA-seq pseudobulk models
#+SETUPFILE: setup.org

* Introduction
  :PROPERTIES:
  :CUSTOM_ID: introduction
  :END:

  One strategy for simplifying the analysis of scRNA-seq data is to construct
  /pseudo-bulk data/. If we have molecule counts generated using scRNA-seq for
  genes \(j = 1, \ldots, p\) measured in cells \(i = 1, \ldots, n\), belonging
  to \(m\) different groups denoted by indicator variables \(z_{ik}, k = 1,
  \ldots, m\), then this approach constructs new data \(y_{kj} = \sum_i x_{ij}
  z_{ik}\). The key idea of this approach is that the new data \(y_{kj}\) can
  be treated as bulk RNA-seq data in downstream analysis.

  However, this approach has been observed to lead to biases in regression and
  differential expression analyses, possibly due to differing size factors
  (total number of molecules observed). Here, we outline an alternative procedure
  and demonstrate that it is not biased by variation in size factors.

* Setup
  :PROPERTIES:
  :CUSTOM_ID: setup
  :END:

  #+BEGIN_SRC emacs-lisp :exports none
    (add-to-list 'python-shell-completion-native-disabled-interpreters "jupyter")
    (org-babel-lob-ingest "/home/aksarkar/.emacs.d/org-templates/library.org")
  #+END_SRC

  #+RESULTS:
  : 1

  #+CALL: ipython3(venv="singlecell",partition="mstephens") :exports none :dir /scratch/midway2/aksarkar/singlecell/

  #+RESULTS:
  : Submitted batch job 1142220

  #+BEGIN_SRC ipython
    import anndata
    import numpy as np
    import pandas as pd
    import scipy.special as sp
    import scipy.stats as st
    import sqlite3
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[6]:
  :END:

  #+BEGIN_SRC ipython
    %matplotlib inline
    %config InlineBackend.figure_formats = set(['retina'])
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[2]:
  :END:

  #+BEGIN_SRC ipython
    import matplotlib.pyplot as plt
    plt.rcParams['figure.facecolor'] = 'w'
    plt.rcParams['font.family'] = 'Nimbus Sans'
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[3]:
  :END:

* Method
  :PROPERTIES:
  :CUSTOM_ID: method
  :END:

  We assume ([[https://dx.doi.org/10.1371/journal.pgen.1008045][Sarkar et
   al. 2019]]) \(
   \DeclareMathOperator\Gam{Gamma}
   \DeclareMathOperator\Poi{Poisson}
   \DeclareMathOperator\argmin{arg min}
   \newcommand\mf{\mathbf{F}} 
   \newcommand\ml{\mathbf{L}}
   \newcommand\mx{\mathbf{X}}
   \newcommand\vl{\mathbf{l}}
   \newcommand\vx{\mathbf{x}}
   \)
  
  \begin{align*}
    x_{ij} \mid x_{i+}, \lambda_{ij} &\sim \Poi(x_{i+} \lambda_{ij})\\
    \lambda_{ij} \mid \mu_{ij}, \phi_{ij}, \pi_{ij} &\sim \pi_{ij} \delta_0(\cdot) + (1 - \pi_{ij}) \Gam(\phi_{ij}^{-1}, \mu_{ij}^{-1} \phi_{ij}^{-1})\\
    \ln \mu_{ij} &= (\ml \mf_\mu')_{ij}\\
    \ln \phi_{ij} &= (\ml \mf_\phi')_{ij}\\
    \operatorname{logit} \pi_{ij} &= (\ml \mf_\pi')_{ij},
  \end{align*}

  where 

  - \(x_{ij}\) is the number of molecules of gene \(j = 1, \ldots, p\) observed
    in cell \(i = 1, \ldots, n\)
  - \(x_{i+} \triangleq \sum_j x_{ij}\) is the total number of molecules
    observed in sample \(i\)
  - cells are taken from \(m\) conditions, \(\ml\) is \(n \times m\),
    and each \(\mf_{(\cdot)}\) is \(p \times m\)
  - assignments of cells to conditions (loadings) \(l_{ik} \in \{0, 1\}, k = 1,
    \ldots, m\) are known and fixed.

  Under this model, latent gene expression \(\lambda_{ij} \sim g_{ij}(\cdot)\),
  and e.g., the mean gene expression is

  \[ E[\lambda_{ij} \mid \hat{g}] = (1 - \hat\pi_{ij}) \hat\mu_{ij}. \]

  We fit the model by maximizing the likelihood using
  [[file:mpebpm.org][stochastic gradient descent]].

* Data
  :PROPERTIES:
  :CUSTOM_ID: data
  :END:

   Read the iPSC data
   ([[https://dx.doi.org/10.1371/journal.pgen.1008045][Sarkar et
   al. 2019]]). We generated scRNA-seq data for 5,597 induced pluripotent stem
   cells derived from 54 donor individuals at 9,957 genes (after quality
   control) using the Fludigm C1 platform.

   #+BEGIN_SRC ipython
     dat = anndata.read_h5ad('/project2/mstephens/aksarkar/projects/singlecell-ideas/data/ipsc/ipsc.h5ad')
   #+END_SRC

   #+RESULTS:
   :RESULTS:
   # Out[4]:
   :END:

   Construct pseudobulk data.

   #+BEGIN_SRC ipython :async t
     y = pd.get_dummies(dat.obs['chip_id']).values.T @ dat.X
   #+END_SRC

   #+RESULTS:
   :RESULTS:
   # Out[5]:
   :END:

   Plot the distribution of size factors for the pseudobulk data.

   #+BEGIN_SRC ipython :ipyfile figure/pseudobulk.org/size.png
     plt.clf()
     plt.gcf().set_size_inches(2.5, 2.5)
     plt.hist(y.sum(axis=1).ravel(), bins=12, color='0.7')
     plt.xlabel('Size factor')
     plt.ylabel('Number of conditions')
     plt.tight_layout()
   #+END_SRC

   #+RESULTS:
   :RESULTS:
   # Out[54]:
   [[file:figure/pseudobulk.org/size.png]]
   :END:

   /SKP1/ was the top eQTL in this data (refer to the
   [[http://shiny.stephenslab.uchicago.edu:5007/qtls][browser]]). Extract the
   genotypes at the top cis-SNP for this gene.

   #+BEGIN_SRC ipython
     with sqlite3.connect('/project2/mstephens/aksarkar/projects/singlecell-qtl/browser/browser.db') as con:
       query = pd.read_sql('select ind, value from mean_qtl_geno, qtls where mean_qtl_geno.gene == qtls.gene and qtls.name == "SKP1";', con=con)
   #+END_SRC

   #+RESULTS:
   :RESULTS:
   # Out[38]:
   :END:

* Results
** Existing approach
   :PROPERTIES:
   :CUSTOM_ID: pseudobulk
   :END:

   Simulate a random Gaussian covariate, and fit a linear model regressing
   \(\ln(y_{kj} / y_{k+} + 1)\) against the (null) covariate.

   #+BEGIN_SRC ipython :async t
     rng = np.random.default_rng(1)
     log1p_y = np.log1p(y / y.sum(axis=1, keepdims=True))
     m = log1p_y.mean(axis=0)
     log1p_y -= m
     log1p_y /= log1p_y.std(axis=0)
     n, p = log1p_y.shape
     x = rng.normal(size=n)
     x -= x.mean()
     x /= x.std()
     bhat = []
     for j in range(p):
       b = x @ log1p_y[:,j] / (x.T @ x)
       bhat.append(b)
     bhat = np.array(bhat)
   #+END_SRC

   #+RESULTS:
   :RESULTS:
   # Out[35]:
   :END:

   Plot the distribution of regression coefficients for equal-sized bins of
   genes, ranked by mean log pseudobulk gene expression.

   #+BEGIN_SRC ipython :ipyfile figure/pseudobulk.org/null-covariate-effect-by-pseudobulk-mean-equal-bins.png
     n_bins = 15
     temp = bhat[np.argsort(m)]
     plt.clf()
     plt.gcf().set_size_inches(4, 3)
     plt.boxplot(np.array_split(temp, 15), positions=range(15), widths=.5, flierprops={'markersize': 1}, medianprops={'color': 'k'})
     plt.axhline(y=0, lw=1, ls='--', c='k')
     plt.xticks(np.arange(n_bins))
     plt.xlabel('Mean log pseudobulk gene expression bin')
     plt.ylabel('Estimated effect size')
     plt.tight_layout()
   #+END_SRC

   #+RESULTS:
   :RESULTS:
   # Out[37]:
   [[file:figure/pseudobulk.org/null-covariate-effect-by-pseudobulk-mean-equal-bins.png]]
   :END:

   Repeat the analysis for the top /cis/-eQTL for /SKP1/.

   #+BEGIN_SRC ipython :async t
     design = query['value'] - query['value'].mean()
     design /= design.std()
     design.index = query['ind']
     response = pd.DataFrame(log1p_y, index=dat.obs['chip_id'].unique(), columns=dat.var['name'])
     design, response = design.align(response, join='inner')
     bhat = []
     for j in range(p):
       b = design @ response.iloc[:,j] / (design.T @ design)
       bhat.append(b)
     bhat = np.array(bhat)
   #+END_SRC

   #+RESULTS:
   :RESULTS:
   # Out[39]:
   :END:

   #+BEGIN_SRC ipython :ipyfile figure/pseudobulk.org/eqtl-effect-by-pseudobulk-mean-equal-bins.png
     n_bins = 15
     temp = bhat[np.argsort(m)]
     plt.clf()
     plt.gcf().set_size_inches(4, 3)
     plt.boxplot(np.array_split(temp, 15), positions=range(15), widths=.5, flierprops={'markersize': 1}, medianprops={'color': 'k'})
     plt.axhline(y=0, lw=1, ls='--', c='k')
     plt.xticks(np.arange(n_bins))
     plt.xlabel('Mean log pseudobulk gene expression bin')
     plt.ylabel('Estimated effect size')
     plt.tight_layout()
   #+END_SRC

   #+RESULTS:
   :RESULTS:
   # Out[41]:
   [[file:figure/pseudobulk.org/eqtl-effect-by-pseudobulk-mean-equal-bins.png]]
   :END:

   One potential explanation for these results is that \(\ln(y_{kj} / y_{k+} +
   1)\) is a biased estimator of \(\ln(\lambda_{kj} + 1)\), and the magnitude
   of the bias depends on the true gene expression \(\lambda_{kj}\)
   ([[https://www.biorxiv.org/content/early/2018/08/31/404962][Lun 2018]])

   \[ E[\ln(y_{kj} / y_{k+} + 1)] \approx E[\ln(\lambda_{kj} + 1)] - \frac{V[y_{kj} / y_{k+}]}{2 (\lambda_{kj} + 1)^2}. \]

** Alternative approach
   :PROPERTIES:
   :CUSTOM_ID: ebpm
   :END:

   Read the [[file:mpebpm.org::#ipsc][estimated model parameters]].

   #+BEGIN_SRC ipython
     log_mu = np.load('/scratch/midway2/aksarkar/ideas/mpebpm-ipsc-log-mu.npy')
     neg_log_phi = np.load('/scratch/midway2/aksarkar/ideas/mpebpm-ipsc-neg-log-phi.npy')
     logodds = np.load('/scratch/midway2/aksarkar/ideas/mpebpm-ipsc-logodds.npy')
   #+END_SRC

   #+RESULTS:
   :RESULTS:
   # Out[7]:
   :END:

   Estimate the mean latent gene expression \(E[\lambda_{ij}] = (1 - \pi_{ij})
   \mu_{ij}\).

   #+BEGIN_SRC ipython
     m, p = log_mu.shape
     # Important: log(sigmoid(x)) = -softplus(-x)
     log_mean = -np.log1p(np.exp(-logodds)) + log_mu
     y = log_mean - log_mean.mean(axis=0)
     y /= y.std(axis=0)
   #+END_SRC

   #+RESULTS:
   :RESULTS:
   # Out[116]:
   :END:

   Simulate a null covariate.

   #+BEGIN_SRC ipython
     np.random.seed(1)
     x = np.random.normal(size=log_mean.shape[0])
     x -= x.mean()
     x /= x.std()
   #+END_SRC

   #+RESULTS:
   :RESULTS:
   # Out[130]:
   :END:

   For each gene, fit a linear model regressing mean latent gene expression in
   each individual against the covariate.

   #+BEGIN_SRC ipython :async t
     bhat = []
     for j in range(p):
       b = x @ y[:,j] / (x.T @ x)
       bhat.append(b)
     bhat = np.array(bhat)
   #+END_SRC

   #+RESULTS:
   :RESULTS:
   # Out[131]:
   :END:

   Plot the distribution of regression coefficients, binned by the mean latent
   gene expression over all cells. Assuming

   \[ x_{ij} \mid x_{i+}, \mu_j \sim \Poi(x_{i+} \mu_j), \]

   it is straightforward to show

   \[ \hat{\mu_j} = \frac{\sum_i x_{ij}}{\sum_i x_{i+}}. \]

   #+BEGIN_SRC ipython :async t
     global_log_mean = np.log(dat.X.sum(axis=0) / dat.X.sum()).ravel()
     grid = np.linspace(global_log_mean.min(), global_log_mean.max(), 15)
     bins = np.digitize(global_log_mean, grid).ravel()
   #+END_SRC

   #+RESULTS:
   :RESULTS:
   # Out[132]:
   :END:

   #+BEGIN_SRC ipython :ipyfile figure/pseudobulk.org/null-covariate-effect-by-mean.png
     plt.clf()
     fig, ax = plt.subplots(2, 1, sharex=True)
     fig.set_size_inches(5.5, 4)
     ax[0].bar(range(grid.shape[0] - 1), [(bins == i).sum() for i in range(1, grid.shape[0])], align='edge', width=1, color='k')
     ax[0].set_ylabel('Number of genes')
     for i in range(1, grid.shape[0]):
       ax[1].boxplot(bhat[bins == i], positions=[i - .5], widths=.5, flierprops={'markersize': 1}, medianprops={'color': 'k'})
     ax[1].axhline(y=0, lw=1, ls='--', c='k')
     ax[1].set_xticks(np.arange(grid.shape[0]))
     ax[1].set_xticklabels([f'{g:.3g}' for g in grid], rotation=90)
     ax[1].set_xlabel('Mean latent gene expression')
     ax[1].set_ylabel('Estimated effect size')
     fig.tight_layout()
   #+END_SRC

   #+RESULTS:
   :RESULTS:
   # Out[120]:
   [[file:figure/pseudobulk.org/null-covariate-effect-by-mean.png]]
   :END:

   Plot the distribution of regression coefficients for equal-sized bins of
   genes, ranked by global mean latent gene expression.

   #+BEGIN_SRC ipython :ipyfile figure/pseudobulk.org/null-covariate-effect-by-mean-equal-bins.png
     n_bins = 15
     temp = bhat[np.argsort(global_log_mean.A.ravel())]
     plt.clf()
     plt.gcf().set_size_inches(4, 3)
     plt.boxplot(np.array_split(temp, 15), positions=range(15), widths=.5, flierprops={'markersize': 1}, medianprops={'color': 'k'})
     plt.axhline(y=0, lw=1, ls='--', c='k')
     plt.xticks(np.arange(n_bins))
     plt.xlabel('Mean latent gene expression bin')
     plt.ylabel('Estimated effect size')
     fig.tight_layout()
   #+END_SRC

   #+RESULTS:
   :RESULTS:
   # Out[144]:
   [[file:figure/pseudobulk.org/null-covariate-effect-by-mean-equal-bins.png]]
   :END:

   For each gene, fit a linear model regressing mean latent gene expression on
   genotype at the cis-SNP.

   #+BEGIN_SRC ipython :async t
     design = query['value'] - query['value'].mean()
     design /= design.std()
     design.index = query['ind']
     response = pd.DataFrame(y, index=dat.obs['chip_id'].unique(), columns=dat.var['name'])
     design, response = design.align(response, join='inner')
     bhat = []
     for j in range(p):
       b = design @ response.iloc[:,j] / (design.T @ design)
       bhat.append(b)
     bhat = np.array(bhat)
   #+END_SRC

   #+RESULTS:
   :RESULTS:
   # Out[145]:
   :END:

   #+BEGIN_SRC ipython :ipyfile figure/pseudobulk.org/eqtl-effect-by-mean.png
     plt.clf()
     fig, ax = plt.subplots(2, 1, sharex=True)
     fig.set_size_inches(5.5, 4)
     ax[0].bar(range(grid.shape[0] - 1), [(bins == i).sum() for i in range(1, grid.shape[0])], align='edge', width=1, color='k')
     ax[0].set_ylabel('Number of genes')
     for i in range(1, grid.shape[0]):
       ax[1].boxplot(bhat[bins == i], positions=[i - .5], widths=.5, flierprops={'markersize': 1}, medianprops={'color': 'k'})
     ax[1].axhline(y=0, lw=1, ls='--', c='k')
     ax[1].set_xticks(np.arange(grid.shape[0]))
     ax[1].set_xticklabels([f'{g:.3g}' for g in grid], rotation=90)
     ax[1].set_xlabel('Mean latent gene expression')
     ax[1].set_ylabel('Estimated effect size')
     fig.tight_layout()
   #+END_SRC

   #+RESULTS:
   :RESULTS:
   # Out[122]:
   [[file:figure/pseudobulk.org/eqtl-effect-by-mean.png]]
   :END:

   Report the global mean gene expression of /SKP1/ (marking which gene
   expression bin it fell into).

   #+BEGIN_SRC ipython
     pd.Series(global_log_mean.A.ravel(), index=response.columns).loc['SKP1']
   #+END_SRC

   #+RESULTS:
   :RESULTS:
   # Out[123]:
   : -6.9060464
   :END:

   After centering and scaling the data, the sampling variance of the
   regression coefficient should be \(1 / 53\). Compare the standard deviation
   of the estimated \(\hat{b_1}, \ldots, \hat{b_p}\) to this theoretical
   expectation.

   #+BEGIN_SRC ipython
     pd.Series({
       'theoretical': np.sqrt(1 / 53),
       'empirical': bhat.std()
     })
   #+END_SRC

   #+RESULTS:
   :RESULTS:
   # Out[129]:
   #+BEGIN_EXAMPLE
     theoretical    0.137361
     empirical      0.136828
     dtype: float64
   #+END_EXAMPLE
   :END:

   Plot the distribution of regression coefficients for equal-sized bins of
   genes, ranked by global mean latent gene expression.

   #+BEGIN_SRC ipython :ipyfile figure/pseudobulk.org/eqtl-effect-by-mean-equal-bins.png
     n_bins = 15
     temp = bhat[np.argsort(global_log_mean.A.ravel())]
     plt.clf()
     plt.gcf().set_size_inches(4, 3)
     plt.boxplot(np.array_split(temp, 15), positions=range(15), widths=.5, flierprops={'markersize': 1}, medianprops={'color': 'k'})
     plt.axhline(y=0, lw=1, ls='--', c='k')
     plt.xticks(np.arange(n_bins))
     plt.xlabel('Mean latent gene expression bin')
     plt.ylabel('Estimated effect size')
     fig.tight_layout()
   #+END_SRC

   #+RESULTS:
   :RESULTS:
   # Out[146]:
   [[file:figure/pseudobulk.org/eqtl-effect-by-mean-equal-bins.png]]
   :END:

