#+TITLE: Population structure in single cell data
#+SETUPFILE: setup.org
#+OPTIONS: toc:t

* Setup                                                            :noexport:

  #+BEGIN_SRC emacs-lisp
    (org-babel-lob-ingest "/home/aksarkar/.emacs.d/org-templates/library.org")
  #+END_SRC

  #+RESULTS:
  : 1

  #+CALL: ipython3(memory="32G",venv="scqtl") :dir /scratch/midway2/aksarkar/singlecell

  #+RESULTS:
  : Submitted batch job 47544833

  #+BEGIN_SRC ipython
    %matplotlib inline
    %config InlineBackend.figure_formats = set(['retina'])
    import colorcet
    import matplotlib.pyplot as plt
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[1]:
  :END:

  #+NAME: imports
  #+BEGIN_SRC ipython
    import numpy as np
    import pandas as pd
    import pickle
    import rpy2.robjects.packages
    import rpy2.robjects.pandas2ri
    import rpy2.robjects.numpy2ri
    import scipy.io as si
    import scipy.stats as st
    import sklearn.decomposition as skd
    import sklearn.linear_model as sklm

    rpy2.robjects.pandas2ri.activate()
    rpy2.robjects.numpy2ri.activate()
    flashr = rpy2.robjects.packages.importr('flashr')
  #+END_SRC

  #+RESULTS: imports
  :RESULTS:
  # Out[2]:
  :END:

* Download the data

  Download the data generated in [[https://www.nature.com/articles/ncomms14049][Zheng et al 2016]].

  #+BEGIN_SRC sh :dir /project2/mstephens/aksarkar/projects/singlecell-ideas/data/10xgenomics
    mkdir -p cd8+_cytotoxic_t_cells
    curl -s "http://cf.10xgenomics.com/samples/cell-exp/1.1.0/cytotoxic_t/cytotoxic_t_filtered_gene_bc_matrices.tar.gz" | tar xzf - -C cd8+_cytotoxic_t_cells

    mkdir -p cd19+_b_cells
    curl -s http://cf.10xgenomics.com/samples/cell-exp/1.1.0/b_cells/b_cells_filtered_gene_bc_matrices.tar.gz | tar xzf - -C cd19+_b_cells
  #+END_SRC

* Read the data

  Read the B cell data.

  #+NAME: read-data-impl
  #+BEGIN_SRC ipython
    data = si.mmread('/project2/mstephens/aksarkar/projects/singlecell-ideas/data/10xgenomics/cd19+_b_cells/filtered_matrices_mex/hg19/matrix.mtx').A
    data = data[data.sum(axis=1) > 0]
    data.shape
  #+END_SRC

  #+RESULTS: read-data-impl
  :RESULTS:
  # Out[22]:
  : (15858, 10085)
  :END:

* Principal components analysis

  Fit incremental SVD (to avoid memory problems).

  #+BEGIN_SRC ipython :eval never :noweb tangle :tangle /project2/mstephens/aksarkar/projects/singlecell-ideas/code/svd.py
    <<imports>>
    <<read-data-impl>>
    res = skd.IncrementalPCA().fit(data.T)
    with open('svd.pkl', 'wb') as f:
      pickle.dump(res, f)
  #+END_SRC

  #+BEGIN_SRC sh :dir /scratch/midway2/aksarkar/singlecell
    sbatch --partition=broadwl -n1 -c28 --exclusive --mem=32G --job-name=svd --out svd.out --time=60:00
    #!/bin/bash
    source activate scqtl
    python /project2/mstephens/aksarkar/projects/singlecell-ideas/code/svd.py
  #+END_SRC

  #+RESULTS:
  : Submitted batch job 46605041

  Read the results.

  #+BEGIN_SRC ipython
    with open('/scratch/midway2/aksarkar/singlecell/svd.pkl', 'rb') as f:
      res = pickle.load(f)
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[4]:
  :END:

  Plot the eigenspectrum of the data.

  #+begin_SRC ipython :ipyfile figure/pop-structure.org/eigenspectrum.png
    plt.clf()
    plt.plot(np.arange(res.singular_values_.shape[0]), np.sqrt(res.singular_values_), lw=1, c='k')
    elbow = np.where(res.singular_values_[1:] / res.singular_values_[:-1] > 0.9)[0].min()
    plt.axvline(x=elbow, c='r', lw=1, ls=':')
    plt.text(s='$\lambda_{}$'.format(elbow + 1), x=5, y=60, color='r')
    plt.xlabel('Eigenvalue')
    plt.ylabel('Magnitude')
    _ = plt.ylim(0, plt.ylim()[1])
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[6]:
  [[file:figure/pop-structure.org/eigenspectrum.png]]
  :END:

  The Marchenko-Pastur distribution describes the noise distribution of the
  eigenvalues, under the null that all eigenvalues are 1.

  #+BEGIN_SRC ipython
    def marchenko_pastur_pdf(x, lambda_, sigma):
      lower = np.square(sigma * (1 - np.sqrt(lambda_)))
      upper = np.square(sigma * (1 + np.sqrt(lambda_)))
      x = np.ma.masked_outside(x, lower, upper)
      return (np.sqrt((upper - x) * (x - lower)) / (2 * np.pi * np.square(sigma) * x * lambda_)).filled(0)
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[7]:
  :END:

  Plot the observed eigenvalues against the estimated noise distribution.

  #+BEGIN_SRC ipython :ipyfile figure/pop-structure.org/tw-vs-eigenvalues.png
    plt.clf()
    eig = np.sqrt(res.singular_values_)
    f = st.gaussian_kde(eig)
    grid = np.linspace(0, eig.max(), num=200)
    plt.plot(grid, f(grid), lw=1, c='k')
    plt.fill_between(grid, f(grid), color='k', alpha=.1)

    y = marchenko_pastur_pdf(grid, res.singular_values_.shape[0] / res.n_components_, 1.85)
    plt.plot(grid, y, c='r', lw=1)
    plt.fill_between(grid, y, color='r', alpha=.1)

    plt.xlim(0, eig.max())
    plt.ylim(0, plt.ylim()[1])
    plt.xlabel('Eigenvalue')
    _ = plt.ylabel('Density')
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[8]:
  [[file:figure/pop-structure.org/tw-vs-eigenvalues.png]]
  :END:

  Implement the Tracy-Widom test for outlier eigenvalues as proposed in
  [[http://dx.doi.org/10.1371/journal.pgen.0020190][Patterson et al. 2006]].

  #+BEGIN_SRC ipython
    def tw_test(n, p, eig):
      l = (p - 1) * eig[0] / eig.sum()
      mu = np.square(np.sqrt(p - 1) + np.sqrt(n)) / p
      sigma = (np.sqrt(p - 1) + np.sqrt(n)) / p * pow(1 / np.sqrt(p - 1) + 1 / np.sqrt(n), 1 / 3)
      x = (l - mu) / sigma
      return x > .9793
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[14]:
  :END:

  #+BEGIN_SRC ipython
    np.where(~np.array([tw_test(res.n_components_, res.singular_values_.shape[0] - i, eig[i:]) for i in range(50)]))[0].min()
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[15]:
  : 24
  :END:

* Empirical Bayes matrix factorization

  Fit ~flash~.

  #+BEGIN_SRC ipython :eval never :noweb tangle :tangle /scratch/midway2/aksarkar/singlecell/flash.py
    <<imports>>
    <<read-data-impl>>
    res0 = skd.TruncatedSVD(n_components=100).fit(data.T)
    flash_data = flashr.flash_init_lf(res0.transform(data.T), res0.components_.T)
    res = flashr.flash(flash_data, greedy=False, backfit=True, verbose=True)
    with open('flash.pkl', 'wb') as f:
      pickle.dump(res, f)
  #+END_SRC

  #+BEGIN_SRC sh :dir /scratch/midway2/aksarkar/singlecell/
    sbatch --partition=broadwl -n1 -c28 --exclusive --mem=32G --job-name=flash --out flash.out --time=60:00
    #!/bin/bash
    source activate scqtl
    python flash.py
  #+END_SRC

  #+RESULTS:
  : Submitted batch job 46604337

  #+BEGIN_SRC sh
    sacct -j 46596099 -o Elapsed,MaxRSS,MaxVMSize
  #+END_SRC

  #+RESULTS:
  |    Elapsed | MaxRSS     | MaxVMSize  |
  | ---------- | ---------- | ---------- |
  |   01:01:48 |            |            |
  |   01:01:49 | 21550040K  | 24148752K  |
  |   01:01:48 | 2276K      | 173996K    |

  Read the results.

  #+BEGIN_SRC ipython
    with open('/scratch/midway2/aksarkar/singlecell/flash.pkl', 'rb') as f:
      res = pickle.load(f)
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[5]:
  :END:

  #+BEGIN_SRC ipython
    np.array(flashr.flash_get_k(res))
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[10]:
  : array([1], dtype=int32)
  :END:

  #+BEGIN_SRC ipython
    l, d, f = flashr.flash_get_ldf(res)
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[11]:
  :END:

  #+BEGIN_SRC ipython
    list(res.names)
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[17]:
  #+BEGIN_EXAMPLE
    ['EL',
    'EF',
    'EL2',
    'EF2',
    'fixl',
    'fixf',
    'gl',
    'gf',
    'ebnm_param_l',
    'ebnm_param_f',
    'KL_l',
    'KL_f',
    'penloglik_l',
    'penloglik_f',
    'tau']
  #+END_EXAMPLE
  :END:
