#+TITLE: Differential variance analysis
#+SETUPFILE: setup.org
\[
\DeclareMathOperator\Poi{Poisson}
\DeclareMathOperator\B{Beta}
\DeclareMathOperator\Gam{Gamma}
\newcommand\kr{k_r}
\newcommand\kon{k_{\text{on}}}
\newcommand\koff{k_{\text{off}}}
\]
* Introduction
  :PROPERTIES:
  :CUSTOM_ID: intro
  :END:

  We previously hypothesized that QTLs could disrupt the mechanisms controlling
  the variance of gene expression, and therefore reveal new insights into the
  genetic regulation of differentiation and disease. To investigate this
  hypothesis, we directly observed gene expression variance across 53
  individuals using scRNA-seq, and sought to identify dispersion QTLs (dQTLs)
  which could alter the variance of gene expression across cells within a
  single individual, independently of altering the mean expression. However, we
  failed to discover such QTLs, and demonstrated that variance QTLs can be
  explained by effects on mean expression
  ([[https://dx.doi.org/10.1371/journal.pgen.1008045][Sarkar et al. 2019]]).

  Before attempting to map dQTLs in a followup study, we need to produce
  evidence that there are such effects to find in human cell types.
  /Essentially no studies demonstrate mechanistic evidence of such effects in
  human tissues./ Many studies measure gene expression variance in human
  tissues without estimating the effect of perturbation
  (e.g. [[https://journals.plos.org/plosbiology/article?id=10.1371/journal.pbio.0040309][Raj
  et al. 2006]], [[https://doi.org/10.1038/nature12172][Shalek et al. 2013]];
  [[https://doi.org/10.1038/nature13437][Shalek et
  al. 2014]]). [[https://science.sciencemag.org/content/355/6332/1433.long][Martinez-Jimenez
  et al. 2018]] (re-analyzed by
  [[https://www.cell.com/cell-systems/fulltext/S2405-4712(18)30278-3][Eling et
  al. 2018]]) showed that aging changes variability of mouse CD4+ cell gene
  expression; however, clearly this perturbation is a complex combination of
  environmental factors. (This data was not generated using UMIs, further
  complicating the analysis.) The strongest evidence is presented by
  [[http://dx.doi.org/10.1038/nbt.2642][Wills et al. 2013]], who demonstrated
  that perturbation of human naive B lymphocytes with a GSK3 inhibitor leads to
  changes in variance of downstream gene expression (as measured by qPCR).

  Here, we develop a method to test for differential variance, and use existing
  scRNA-seq datasets to ask whether there are effects which can alter gene
  expression variance /independent/ of altering mean gene expression.

* Setup
  :PROPERTIES:
  :CUSTOM_ID: setup
  :END:

  #+BEGIN_SRC emacs-lisp :exports none
    (add-to-list 'python-shell-completion-native-disabled-interpreters "jupyter")
    (org-babel-lob-ingest "/home/aksarkar/.emacs.d/org-templates/library.org")
  #+END_SRC

  #+RESULTS:
  : 1

  #+CALL: ipython3(venv="singlecell",partition="broadwl",memory="8G") :exports none :dir /scratch/midway2/aksarkar/singlecell

  #+RESULTS:
  : Submitted batch job 66053695

  #+BEGIN_SRC ipython
    import anndata
    import itertools as it
    import numpy as np
    import pandas as pd
    import pickle
    import poisbeta
    import scipy.special as sp
    import scipy.stats as st
    import scmodes
    import sqlite3
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[1]:
  :END:

  #+BEGIN_SRC ipython
    %matplotlib inline
    %config InlineBackend.figure_formats = set(['retina'])
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[2]:
  :END:

  #+BEGIN_SRC ipython
    import colorcet
    import matplotlib.pyplot as plt
    plt.rcParams['figure.facecolor'] = 'w'
    plt.rcParams['font.family'] = 'Nimbus Sans'
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[3]:
  :END:

* Methods
  :PROPERTIES:
  :CUSTOM_ID: methods
  :END:
** Mechanistic basis of effects on variance
   :PROPERTIES:
   :CUSTOM_ID: poisson-beta
   :END:

   A simple model for transcriptional regulation is the /telegraph model/
   ([[https://www.sciencedirect.com/science/article/pii/S0040580985710271][Peccoud
   and Ycart 1995]],
   [[https://journals.plos.org/plosbiology/article?id=10.1371/journal.pbio.0040309][Raj
   et al. 2006]], [[https://dx.doi.org/10.1186/gb-2013-14-1-r7][Kim and Marioni
   2013]], [[https://dx.doi.org/10.1126/science.1216379][Munsky et al. 2013]]).
   The steady state of this model can be characterized as a
   [[file:pois-beta.org][Poisson-Beta distribution]]

   \begin{align*}
     m_i \mid \kr, p_i &\sim \Poi(\kr p_i)\\
     p_i \mid \kon, \koff &\sim \B(\kon, \koff)
   \end{align*}

   where:

   - \(m_i\) is the number of molecules in sample \(i\) (considering one gene)
   - \(\kr\) is the rate of transcription
   - \(\kon\) is the rate of off \(\rightarrow\) on promoter switching
   - \(\koff\) is the rate of on \(\rightarrow\) off promoter switching

   and rates are scaled by the decay rate. Under this model

   \begin{align*}
     E[m_i] &= \kr \frac{\kon}{\kon + \koff}\\
     V[m_i] &= \kr \frac{\kon}{\kon + \koff} + \kr^2 \frac{\kon\koff}{(\kon + \koff)^2 (\kon + \koff + 1)}\\
     \text{Fano factor} &= 1 + \frac{\kr\koff}{(\kon + \koff) (\kon + \koff + 1)}
   \end{align*}

   It follows that an effect which changes variance /while leaving the mean
   unchanged/ must leave \(p_i\) unchanged, i.e. equally scale \(\kon\) and
   \(\koff\). This fact raises several questions:

   - Do we know of such a biological mechanism?
   - Should we expect to find one?
   - Does such an effect require convergence of multiple biological mechanisms?
   - This model assumes /all cells are described by the same kinetic
     parameters./ What if subsets of cells change kinetic parameters in
     different directions?

   The Poisson-Beta model describes the process which generates the molecules
   present in each cell; however, it does not include measurement error. To
   model measurement error, assume there are \(m_{ij}\) molecules from gene
   \(j\) in cell \(i\), with \(m_i^+\) molecules total, but we only observe a
   random sample \(x_{i1}, \ldots, x_{ip}\) of the available molecules, in
   which case

   \[ x_{i1}, \ldots, x_{ip} \mid x_i^+ \sim \operatorname{Multinomial}(x_i^+, \lambda_{i1}, \ldots, \lambda_{ip}) \]

   where \(x_i^+ \triangleq \sum_j x_{ij}\), \(\lambda_{ij} \triangleq
   m_{ij} / m_i^+\), and we have assumed that \(x_i^+ \ll m_i^+\). This can be
   transformed into a Poisson model (Baker 1994)

   \[ x_{ij} \sim \Poi(x_i^+ \lambda_{ij}), \qquad j = 1, \ldots, p \]

   Therefore, observed molecule counts \(x_{ij}\) are generated as Poisson
   sampling on top of a Poisson-Beta generative process. However, focusing on
   gene \(j\)

   \[ x_{ij} \sim \Poi(x_i^+ m_{ij} / m_i^+) \approx \operatorname{Binomial}(m_{ij}, x_i^+ / m_i^+) \]

   and we have \(k_r p_i \propto \lambda_{ij}\), yielding a model (via binomial
   thinning; [[https://www.biorxiv.org/content/10.1101/758524v1][Gerard 2019]])

   \[ x_{ij} \sim \Poi(x_i^+ \kr p_i) \]

   which was proposed by Kim and Marioni 2013. Now suppose we fit a
   Poisson-Gamma model to the observed data, meaning we assume variation in
   \(\lambda_{ij}\) (which is due to stochastic transcription) follows a Gamma
   distribution

   \begin{align*}
     x_i \mid x_i^+, \lambda_i &\sim \Poi(x_i^+ \lambda_i) \\
     \lambda_i \mid \mu, \phi &\sim \Gam(\phi, \phi / \mu)
   \end{align*}

   where:

   - \(x_i^+\) denotes the total number of molecules sequenced in sample \(i\)
   - \(\mu\) denotes the latent mean gene expression
   - \(\phi\) denotes the overdispersion parameter (relative to Poisson)

   Under the Poisson-Gamma model:

   \begin{align*}
     E[x_i] &= x_i^+ \mu \\
     V[x_i] &= x_i^+ \mu + (x_i^+ \mu)^2 \phi \\
     \text{Fano factor} &= 1 + \phi
   \end{align*}

   Naively, it would seem the mean \(\mu\) and overdispersion \(\phi\) will be
   related to each other, through their dependence on \(\kr, \kon,
   \koff\). This possibility raises several questions:

   - If we do find effects on \(\phi\), should we expect them to be independent
     of effects on \(\mu\)?
   - [[https://dx.doi.org/10.1126/science.1216379][Eling et al. 2018]] claim
     data demonstrate this relationship, and propose to correct the
     relationship between \(\mu\) and \(\phi\).
   - Will this approach find something other than differences in kinetic
     parameters? Why not just test for parameter differences in that model?

** Differential variance
   :PROPERTIES:
   :CUSTOM_ID: diff-var
   :END:

   We assume the following generative model for the data:

   \begin{align*}
     x_{ij} \mid x_i^+ &\sim \operatorname{Poisson}(x_i^+ \lambda_{ij}) \\
     \lambda_{ij} \mid z_i &\sim g_{z_i}(\cdot)
   \end{align*}

   where:

   - \(x_{ij}\) is the number of molecules in sample \(i\) mapping to gene
     \(j\)
   - \(x_i^+\) is the total number of molecules in sample \(i\)
   - \(z_i\) is an indicator variable denoting which group sample \(i\) belongs
     to

   Under this model, the variance in group \(k\) is
   \(\operatorname{Var}(g_{k})\).

   Although it is possible to estimate likelihood ratios comparing the assumed
   model to the null model:

   \begin{align*}
     x_{ij} \mid x_i^+ &\sim \operatorname{Poisson}(x_i^+ \lambda_{ij}) \\
     \lambda_{ij} &\sim g_0(\cdot)
   \end{align*}

   this model comparison will also be significant for differentially expressed
   genes which do not have significant changes in variance.

   As an alternative, if we assume \(g\) is a mixture of a point mass on zero
   and a Gamma distribution:

   \[ g = \pi \delta_0(\cdot) + (1 - \pi) \operatorname{Gamma}(\frac{1}{\phi},
   \frac{1}{\mu\phi}) \]

   then we can estimate differences in \(\phi\) and bootstrap to get
   \(p\)-values. There are three challenges in this approach:

   1. /Boundary values/. In real data, we should expect \(\pi = 0\) (Negative Binomial
      marginal distribution), and even \(\phi = \infty\) ([Zero-inflated] Poisson
      marginal distribution) for some genes.

   2. /Mean-variance relationship/. Eling et al. 2018 claim there is a
      relationship even between \(\mu\) and \(\phi\) in the deconvolved Gamma
      distributions.

   3. /Computational cost/. The bootstraps are expensive, and it is difficult
      to take a hierarchical approach in this setting due to lack of conjugacy.

   #+BEGIN_SRC ipython
     def est_diff_var(x, s, z):
       g1 = scmodes.ebpm.ebpm_gamma(x[z], s[z])
       var1 = np.exp(2 * g1[0] + g1[1])
       g2 = scmodes.ebpm.ebpm_gamma(x[~z], s[~z])
       var2 = np.exp(2 * g2[0] + g2[1])
       return var2 - var1

     def diff_var_bootstrap(x, s, z, random_state=None, n_bootstrap=1000):
       if random_state is not None:
         np.random.seed(random_state)
       theta = est_diff_var(x, s, z)
       B = []
       for trial in range(n_bootstrap):
         B.append(est_diff_var(x, s, np.random.permutation(z)))
       B = np.array(B)
       if theta < 0:
         return theta, (B < theta).mean()
       else:
         return theta, (B > theta).mean()
   #+END_SRC

   #+RESULTS:
   :RESULTS:
   # Out[69]:
   :END:

   As a second alternative, for each gene \(j\) we can estimate \(g_0\) via
   Empirical Bayes, and then recover the posterior distribution:

   \begin{align*}
     \hat{g} &= \hat\pi \delta_0(\cdot) + (1 - \hat\pi)\operatorname{Gamma}(\frac{1}{\hat\phi}, \frac{1}{\hat\mu \hat\phi})\\
     p(\lambda_i \mid x_1, \ldots, x_n, x_1^+, \ldots, x_n^+, \hat{g}) &= \hat\pi \delta_0(\cdot) + (1 - \hat\pi)\operatorname{Gamma}\left(\cdot; x_i +
      \frac{1}{\hat\phi}, x_i^+ + \frac{1}{\hat\mu \hat\phi}\right)
   \end{align*}

   We can then take sample variances of latent gene expression values
   \(E[\lambda_i \mid \cdot]\) across groups.

   #+BEGIN_SRC ipython
     def post_mean(x, s, log_mu, neg_log_phi):
       return (x + np.exp(neg_log_phi)) / (s + np.exp(-log_mu + neg_log_phi))

     def diff_var_pm(x, s, z):
       g1 = scmodes.ebpm.ebpm_gamma(x[z], s[z])
       lam1 = post_mean(x, s, *g1[:-1])
       g2 = scmodes.ebpm.ebpm_gamma(x[~z], s[~z])
       lam2 = post_mean(x, s, *g2[:-1])
   #+END_SRC

** Data sets
   :PROPERTIES:
   :CUSTOM_ID: data
   :END:

   For null simulations, we use homogeneous populations of sorted cells (Zheng
   et al. 2017):

   - Cytotoxic T cells
   - B cells

   As a positive control, we re-analyze
   [[https://www.ebi.ac.uk/arrayexpress/experiments/E-MTAB-4888/][unstimulated
   and stimulated naive and effector memory CD4+ T cells]] from young and old
   mice from two divergent species (Martinez-Jimenez et al. 2018)

   #+BEGIN_SRC sh :dir /scratch/midway2/aksarkar/singlecell
     sbatch --partition=mstephens
     #!/bin/bash
     test -f E-MTAB-4888.processed.1.zip || curl -O https://www.ebi.ac.uk/arrayexpress/files/E-MTAB-4888/E-MTAB-4888.processed.1.zip
     test -f raw_data.txt || unzip E-MTAB-4888.processed.1.zip
     mkdir -p /project2/mstephens/aksarkar/projects/singlecell-ideas/data/E-MTAB-4888
     gzip <raw_data.txt >/project2/mstephens/aksarkar/projects/singlecell-ideas/data/E-MTAB-4888/counts.txt.gz
   #+END_SRC

   #+RESULTS:
   : Submitted batch job 61624943

   #+BEGIN_SRC ipython
   
   #+END_SRC

   We then analyze single cell RNA-seq time course data through differentiation
   of iPSCs into cardiomyocytes (Selewa et al. 2019).

* Results
  :PROPERTIES:
  :CUSTOM_ID: results
  :END:
** Mean-dispersion relationship
   :PROPERTIES:
   :CUSTOM_ID: mean-disp-rel
   :END:

   Use scRNA-seq of 9,957 genes in 5,597 iPSCs from 53 donors (Sarkar et
   al. 2019) to examine the relationship between mean and dispersion.

   #+BEGIN_SRC ipython
     log_mu = pd.read_csv('/project2/mstephens/aksarkar/projects/singlecell-qtl/data/density-estimation/design1/zi2-log-mu.txt.gz', sep=' ', index_col=0)
     log_phi = pd.read_csv('/project2/mstephens/aksarkar/projects/singlecell-qtl/data/density-estimation/design1/zi2-log-phi.txt.gz', sep=' ', index_col=0)
     logodds = pd.read_csv('/project2/mstephens/aksarkar/projects/singlecell-qtl/data/density-estimation/design1/zi2-logodds.txt.gz', sep=' ', index_col=0)
   #+END_SRC

   #+RESULTS:
   :RESULTS:
   # Out[32]:
   :END:

   #+BEGIN_SRC ipython :ipyfile figure/diff-var.org/log-mu-vs-log-phi.png
     plt.clf()
     plt.gcf().set_size_inches(3, 3)
     H = np.histogram2d(log_mu.values.ravel(), log_phi.values.ravel(), bins=200)
     X, Y = np.meshgrid(H[1], H[2])
     plt.contour(X[1:,1:].T, Y[1:,1:].T, H[0], cmap=colorcet.cm['fire'], linewidths=1)
     plt.xlabel('$\ln(\mu)$')
     plt.ylabel('$\ln(\phi)$')
     plt.tight_layout()
   #+END_SRC

   #+RESULTS:
   :RESULTS:
   # Out[31]:
   [[file:figure/diff-var.org/log-mu-vs-log-phi.png]]
   :END:

   Look at zeros and dispersion.

   #+BEGIN_SRC ipython :ipyfile figure/diff-var.org/logodds-vs-log-phi.png
     plt.clf()
     plt.gcf().set_size_inches(3, 3)
     H = np.histogram2d(logodds.values.ravel(), log_phi.values.ravel(), bins=200)
     X, Y = np.meshgrid(H[1], H[2])
     plt.contour(X[1:,1:].T, Y[1:,1:].T, H[0], cmap=colorcet.cm['fire'], linewidths=1)
     plt.xlabel('$\mathrm{logit}(\pi)$')
     plt.ylabel('$\ln(\mu)$')
     plt.tight_layout()
   #+END_SRC

   #+RESULTS:
   :RESULTS:
   # Out[34]:
   [[file:figure/diff-var.org/logodds-vs-log-phi.png]]
   :END:

   We previously looked at the relationship between estimated parameters,
   averaging over all 53 individuals.

   https://jdblischak.github.io/singlecell-qtl/figure/zinb.org/joint-distribution.png

** Null simulation
   :PROPERTIES:
   :CUSTOM_ID: null-sim
   :END:

   Randomly split a homogeneous sample into two groups to generate null data
   sets.

   #+BEGIN_SRC ipython
     def null_sim(x, n1, n2, seed=0):
       np.random.seed(seed)
       assert n1 + n2 < x.shape[0]
       x_sub = x.iloc[np.random.choice(x.shape[0], size=n1 + n2, replace=False)].sample(frac=1)
       z = np.zeros(n1 + n2).astype(bool)
       z[:n1] = 1
       return x_sub, z

     def evaluate_null_type1(data, n=100, n_trials=10):
       result = []
       for trial in range(n_trials):
         x, z = null_sim(data, n, n, seed=trial)
         s = x.sum(axis=1)
         for gene, counts in x.iteritems():
           try:
             llr, p = diff_var_bootstrap(counts.values, s, z, n_bootstrap=200)
           except RuntimeError:
             llr, p = np.nan, np.nan
           result.append(pd.Series({'trial': trial, 'gene': gene, 'n': n, 'llr': llr, 'p': p}))
       result = pd.DataFrame(result)
       return result
   #+END_SRC

   #+RESULTS:
   :RESULTS:
   # Out[97]:
   :END:

   Read the data.

   #+BEGIN_SRC ipython
     cytotoxic_t = scmodes.dataset.read_10x('/project2/mstephens/aksarkar/projects/singlecell-ideas/data/10xgenomics/cytotoxic_t/filtered_matrices_mex/hg19', min_detect=0.25, return_df=True)
   #+END_SRC

   #+RESULTS:
   :RESULTS:
   # Out[57]:
   :END:

   First, apply our approach to a single example.

   #+BEGIN_SRC ipython :async t
     x, z = null_sim(cytotoxic_t, n1=200, n2=200, seed=1)
     s = x.sum(axis=1)
     diff_var_bootstrap(x.iloc[:,1], s, z, n_bootstrap=200, random_state=1)
   #+END_SRC

   #+RESULTS:
   :RESULTS:
   # Out[87]:
   : (-6.193533177784196e-07, 0.15)
   :END:

   Test the benchmark.

   #+BEGIN_SRC ipython :async t
     test_result = evaluate_null_type1(cytotoxic_t.iloc[:,:5], n=200, n_trials=1)
     test_result.head()
   #+END_SRC

   #+RESULTS:
   :RESULTS:
   # Out[98]:
   #+BEGIN_EXAMPLE
     trial             gene    n  llr   p
     0      0  ENSG00000116251  200  NaN NaN
     1      0  ENSG00000116288  200  NaN NaN
     2      0  ENSG00000074800  200  NaN NaN
     3      0  ENSG00000077549  200  NaN NaN
     4      0  ENSG00000142676  200  NaN NaN
   #+END_EXAMPLE
   :END:
** Fitting kinetic models directly

   Instead of assuming variance of gene expression is driven by stochastic
   transcription and asking whether the variance changes after some
   perturbation, we could attempt to ask directly whether the underlying
   stochastic process changes. We previously identified 5 variance QTLs in
   iPSCs, but also found they were all mean QTLs.

   Read the data.

   #+BEGIN_SRC ipython :async t
     x = anndata.read_h5ad('/project2/mstephens/aksarkar/projects/singlecell-ideas/data/ipsc/ipsc.h5ad')
   #+END_SRC

   #+RESULTS:
   :RESULTS:
   # Out[5]:
   :END:

   #+BEGIN_SRC ipython
     vqtls = pd.read_csv('/project2/mstephens/aksarkar/projects/singlecell-qtl/data/scqtl-mapping/variance.txt.gz', sep=' ', index_col=0)
   #+END_SRC

   #+RESULTS:
   :RESULTS:
   # Out[6]:
   :END:

   #+BEGIN_SRC ipython
     vqtls.sort_values('p_beta').head(n=5)
   #+END_SRC

   #+RESULTS:
   :RESULTS:
   # Out[101]:
   #+BEGIN_EXAMPLE
     chr      start        end strand  num_vars  distance  \
     gene
     ENSG00000184674  chr22   24384681   24384680      -       477       0.0
     ENSG00000113558   chr5  133512730  133512729      -       673   -2801.0
     ENSG00000132507  chr17    7210319    7210318      +       496    5218.0
     ENSG00000148680  chr10   92617672   92617671      -       669   47915.0
     ENSG00000131469  chr17   41150291   41150290      +       515  -32887.0

     id var_chr    var_start      var_end  \
     gene
     ENSG00000184674   esv2669470.chr22.24343050   chr22   24343050.0   24397301.0
     ENSG00000113558   rs13356194.chr5.133515530    chr5  133515530.0  133515530.0
     ENSG00000132507     rs1054378.chr17.7215536   chr17    7215536.0    7215536.0
     ENSG00000148680  rs138704692.chr10.92569757   chr10   92569757.0   92569757.0
     ENSG00000131469   rs12947287.chr17.41117404   chr17   41117404.0   41117404.0

     df    dummy         a        b     p_nominal      beta  \
     gene
     ENSG00000184674  51.0  43.2504  1.033960  59.1680  4.192900e-11 -1.182590
     ENSG00000113558  51.0  39.5051  1.066360  37.1031  1.387570e-10 -0.796700
     ENSG00000132507  51.0  42.2941  1.069530  73.9335  7.525920e-10 -1.214550
     ENSG00000148680  51.0  42.9914  1.035830  43.6306  4.632030e-09 -1.044440
     ENSG00000131469  51.0  34.8434  0.902717  23.8075  8.796860e-11 -0.848284

     p_empirical        p_beta
     gene
     ENSG00000184674       0.0001  4.266760e-08
     ENSG00000113558       0.0001  2.371110e-07
     ENSG00000132507       0.0001  6.094700e-07
     ENSG00000148680       0.0001  2.088450e-06
     ENSG00000131469       0.0001  7.746900e-06
   #+END_EXAMPLE
   :END:

   #+BEGIN_SRC ipython
     x.var.loc['ENSG00000184674']
   #+END_SRC

   #+RESULTS:
   :RESULTS:
   # Out[7]:
   #+BEGIN_EXAMPLE
     chr             hs22
     start       24376133
     end         24384680
     name           GSTT1
     strand             -
     source    H. sapiens
     Name: ENSG00000184674, dtype: object
   #+END_EXAMPLE
   :END:

   #+BEGIN_SRC ipython
     with sqlite3.connect('/project2/mstephens/aksarkar/projects/singlecell-qtl/browser/browser.db') as conn:
       geno = pd.read_sql('select * from mean_qtl_geno where gene = ?', con=conn, params=('ENSG00000184674',)).set_index('ind')['value']
   #+END_SRC

   #+RESULTS:
   :RESULTS:
   # Out[6]:
   :END:

   Read the previously fitted point-Gamma distribution for each individual.

   #+BEGIN_SRC ipython
     log_mu = pd.read_csv('/project2/mstephens/aksarkar/projects/singlecell-qtl/data/density-estimation/design1/zi2-log-mu.txt.gz', sep=' ', index_col=0)
     log_phi = pd.read_csv('/project2/mstephens/aksarkar/projects/singlecell-qtl/data/density-estimation/design1/zi2-log-phi.txt.gz', sep=' ', index_col=0)
     logodds = pd.read_csv('/project2/mstephens/aksarkar/projects/singlecell-qtl/data/density-estimation/design1/zi2-logodds.txt.gz', sep=' ', index_col=0)
   #+END_SRC

   #+RESULTS:
   :RESULTS:
   # Out[7]:
   :END:

   Plot the observed data and the fitted distributions.

   #+BEGIN_SRC ipython :async t
     query = x.X.tocsc()[:,(x.var['name'] == 'GSTT1').values].A.ravel()
     lam = query / x.obs['mol_hs']
   #+END_SRC

   #+RESULTS:
   :RESULTS:
   # Out[8]:
   :END:

   #+BEGIN_SRC ipython :ipyfile figure/diff-var.org/ipsc-gstt1.png
     cm = plt.get_cmap('Dark2')
     k = 'ENSG00000184674'

     plt.clf()
     fig, ax = plt.subplots(2, 1)
     fig.set_size_inches(6, 4)
     bins = np.arange(query.max() + 1)
     ax[0].hist(query, bins=bins, color='k')
     ax[0].set_xlabel('Number of molecules')
     ax[0].set_ylabel('Number of cells')
     ax[0].set_title(x.var.loc[k, 'name'])
     ax[0].set_xticks(bins[::2])

     grid = np.linspace(0, lam.max(), 1000)
     for i in log_mu.columns:
       if i in geno.index:
         t = log_mu.loc[k, i], log_phi.loc[k, i], logodds.loc[k, i]
         F = st.gamma(a=np.exp(-t[1]), scale=np.exp(t[0] + t[1])).cdf(grid)
         # Important: we need to round the imputed dosages
         ax[1].plot(grid, F, lw=1, alpha=0.35, c=cm(int(np.round(geno.loc[i]))))
     dummy = [plt.Line2D([0], [0], c=cm(i)) for i in range(3)]
     ax[1].legend(dummy, np.arange(3), title=vqtls.loc[k, 'id'].split('.')[0], frameon=False)
     ax[1].set_xlabel('Latent gene expression')
     ax[1].set_ylabel('CDF')
     ax[1].set_xlim(0, 7e-5)

     fig.tight_layout()
   #+END_SRC

   #+RESULTS:
   :RESULTS:
   # Out[91]:
   [[file:figure/diff-var.org/ipsc-gstt1.png]]
   :END:

   Estimate the posterior distribution of kinetic parameters for each individual.

   #+BEGIN_SRC ipython :async t
     k_params = dict()
     for i in geno.index:
       print(f'Fitting individual {i}')
       keep = (x.obs['chip_id'] == i).values.ravel()
       xg = query[keep]
       sg = x.obs['mol_hs'].values[keep]
       samples, _ = poisbeta.fit_poisson_beta_mcmc(xg, n_samples=1000, ar=1, br=xg.max(), aon=1, bon=100, aoff=1, boff=100)
       k_params[i] = samples
   #+END_SRC

   #+RESULTS:
   :RESULTS:
   # Out[33]:
   :END:

   Write out the samples.

   #+BEGIN_SRC ipython
     with open('/scratch/midway2/aksarkar/ideas/ipsc-gstt1-post.pkl', 'wb') as f:
       pickle.dump(k_params, f)
   #+END_SRC

   #+RESULTS:
   :RESULTS:
   # Out[109]:
   :END:

   Plot the 95% credible intervals for each parameter in each individual,
   against genotype.

   #+BEGIN_SRC ipython :ipyfile figure/diff-var.org/ipsc-gstt1-params.png
     plt.clf()
     fig, ax = plt.subplots(1, 3)
     fig.set_size_inches(8, 3)
     n = geno.shape[0]
     for j, (a, t) in enumerate(zip(ax, ['$\log\,k_r$', '$\log\,k_{\mathrm{on}}$', '$\log\,k_{\mathrm{off}}$'])):
       y = np.array([np.log(k_params[i][-800:,j]).mean() for i in geno.index])
       ci = np.array([np.percentile(np.log(k_params[i][-800:,j]), [2.5, 97.5]) for i in geno.index]).T
       ax[j].errorbar(x=geno.values + np.random.normal(scale=0.1, size=n),
                      y=y,
                      yerr=abs(ci - y),
                      fmt='.',
                      c='k',
                      ecolor='0.7',
                      elinewidth=1,
                      ms=4,
       )
       ax[j].set_xlabel('Imputed dosage')
       ax[j].set_ylabel(t)
       fig.tight_layout()
   #+END_SRC

   #+RESULTS:
   :RESULTS:
   # Out[71]:
   [[file:figure/diff-var.org/ipsc-gstt1-params.png]]
   :END:

   Plot one of the joint posteriors.

   #+BEGIN_SRC ipython :ipyfile figure/diff-var.org/ipsc-gstt1-joint.png
     names = ['$\log\,k_r$', '$\log\,k_{\mathrm{on}}$', '$\log\,k_{\mathrm{off}}$']
     plt.clf()
     fig, ax = plt.subplots(1, 3)
     fig.set_size_inches(8, 3)
     for (s, t), a in zip(it.combinations(range(3), 2), ax):
       x = np.array([np.log(k_params['NA18852'][-800:,s]) for i in geno.index])
       y = np.array([np.log(k_params['NA18852'][-800:,t]) for i in geno.index])
       a.hexbin(x=x, y=y, gridsize=15, cmap=colorcet.cm['gray_r'])
       a.set_xlabel(names[s])
       a.set_ylabel(names[t])
       a.set_title('NA18852')
     fig.tight_layout()
   #+END_SRC

   #+RESULTS:
   :RESULTS:
   # Out[106]:
   [[file:figure/diff-var.org/ipsc-gstt1-joint.png]]
   :END:

   Repeat the analysis for the rest of the vQTLs.

   #+BEGIN_SRC ipython :async t
     k = 'ENSG00000113558'
     with sqlite3.connect('/project2/mstephens/aksarkar/projects/singlecell-qtl/browser/browser.db') as conn:
       geno = pd.read_sql('select * from mean_qtl_geno where gene = ?', con=conn, params=(k,)).set_index('ind')['value']
     query = x.X.tocsc()[:,list(x.var.index).index(k)].A.ravel()
     k_params = dict()
     for i in geno.index:
       print(f'Fitting individual {i}')
       keep = (x.obs['chip_id'] == i).values.ravel()
       xg = query[keep]
       sg = x.obs['mol_hs'].values[keep]
       samples, _ = poisbeta.fit_poisson_beta_mcmc(xg, n_samples=1000, ar=1, br=xg.max(), aon=1, bon=100, aoff=1, boff=100)
       k_params[i] = samples
   #+END_SRC

   #+RESULTS:
   :RESULTS:
   # Out[6]:
   :END:

   #+BEGIN_SRC ipython :ipyfile figure/diff-var.org/ipsc-skp1.png
     plt.clf()
     fig, ax = plt.subplots(1, 3)
     fig.set_size_inches(8, 3)
     n = geno.shape[0]
     for j, (a, t) in enumerate(zip(ax, ['$\log\,k_r$', '$\log\,k_{\mathrm{on}}$', '$\log\,k_{\mathrm{off}}$'])):
       y = np.array([np.log(k_params[i][-800:,j]).mean() for i in geno.index])
       ci = np.array([np.percentile(np.log(k_params[i][-800:,j]), [2.5, 97.5]) for i in geno.index]).T
       ax[j].errorbar(x=geno.values + np.random.normal(scale=0.1, size=n),
                      y=y,
                      yerr=abs(ci - y),
                      fmt='.',
                      c='k',
                      ecolor='0.7',
                      elinewidth=1,
                      ms=4,
       )
       ax[j].set_title(x.var.loc['ENSG00000113558', 'name'])
       ax[j].set_xlabel('Imputed dosage')
       ax[j].set_ylabel(t)
       fig.tight_layout()
   #+END_SRC

   #+RESULTS:
   :RESULTS:
   # Out[7]:
   [[file:figure/diff-var.org/ipsc-skp1.png]]
   :END:

   #+BEGIN_SRC ipython :async t
     k = 'ENSG00000132507'
     with sqlite3.connect('/project2/mstephens/aksarkar/projects/singlecell-qtl/browser/browser.db') as conn:
       geno = pd.read_sql('select * from mean_qtl_geno where gene = ?', con=conn, params=(k,)).set_index('ind')['value']
     query = x.X.tocsc()[:,list(x.var.index).index(k)].A.ravel()
     k_params = dict()
     for i in geno.index:
       print(f'Fitting individual {i}')
       keep = (x.obs['chip_id'] == i).values.ravel()
       xg = query[keep]
       sg = x.obs['mol_hs'].values[keep]
       samples, _ = poisbeta.fit_poisson_beta_mcmc(xg, n_samples=1000, ar=1, br=xg.max(), aon=1, bon=100, aoff=1, boff=100)
       k_params[i] = samples
   #+END_SRC

   #+RESULTS:
   :RESULTS:
   # Out[8]:
   :END:

   #+BEGIN_SRC ipython :ipyfile figure/diff-var.org/ipsc-ENSG00000132507.png
     plt.clf()
     fig, ax = plt.subplots(1, 3)
     fig.set_size_inches(8, 3)
     n = geno.shape[0]
     for j, (a, t) in enumerate(zip(ax, ['$\log\,k_r$', '$\log\,k_{\mathrm{on}}$', '$\log\,k_{\mathrm{off}}$'])):
       y = np.array([np.log(k_params[i][-800:,j]).mean() for i in geno.index])
       ci = np.array([np.percentile(np.log(k_params[i][-800:,j]), [2.5, 97.5]) for i in geno.index]).T
       ax[j].errorbar(x=geno.values + np.random.normal(scale=0.1, size=n),
                      y=y,
                      yerr=abs(ci - y),
                      fmt='.',
                      c='k',
                      ecolor='0.7',
                      elinewidth=1,
                      ms=4,
       )
       ax[j].set_title(x.var.loc[k, 'name'])
       ax[j].set_xlabel('Imputed dosage')
       ax[j].set_ylabel(t)
       fig.tight_layout()
   #+END_SRC

   #+RESULTS:
   :RESULTS:
   # Out[9]:
   [[file:figure/diff-var.org/ipsc-ENSG00000132507.png]]
   :END:
