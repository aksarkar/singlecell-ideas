#+TITLE: GOM model for spatial transcriptomic data
#+SETUPFILE: setup.org

* Introduction

  [[https://pubmed.ncbi.nlm.nih.gov/10548103/][Lee and Seung 1999]] described
  how (Poisson) non-negative matrix factorization (NMF) can be used to learn
  "parts" of faces/semantic concepts that combine additively to generate
  observed images/text. Here, we investigate the use of NMF to learn spatial
  structures from /spatial transcriptomic/ data
  ([[https://science.sciencemag.org/content/353/6294/78][Ståhl et al. 2016]],
  [[https://www.nature.com/articles/s41592-019-0548-y][Vikovic et al. 2019]],
  [[https://science.sciencemag.org/content/353/6294/78][Rodriques et
  al. 2019]]).

* Setup
  :PROPERTIES:
  :CUSTOM_ID: setup
  :END:

  #+BEGIN_SRC emacs-lisp :exports none
    (add-to-list 'python-shell-completion-native-disabled-interpreters "jupyter")
    (org-babel-lob-ingest "/home/aksarkar/.emacs.d/org-templates/library.org")
  #+END_SRC

  #+RESULTS:
  : 2

  #+CALL: ipython3(venv="singlecell",partition="gpu2",opts="--gres=gpu:1 -c8",memory="8G") :exports none :dir /scratch/midway2/aksarkar/singlecell

  #+BEGIN_SRC ipython
    import anndata
    import numpy as np
    import pandas as pd
    import scanpy as sc
    import scipy.sparse as ss
    import scipy.stats as st
    import scmodes
    import sklearn.datasets as skd
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[6]:
  :END:

  #+BEGIN_SRC ipython
    import rpy2.robjects.packages
    import rpy2.robjects.pandas2ri
    rpy2.robjects.pandas2ri.activate()
    matrix = rpy2.robjects.packages.importr('Matrix')
    fasttopics = rpy2.robjects.packages.importr('fastTopics')
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[2]:
  :END:
  
  #+BEGIN_SRC ipython
    %matplotlib inline
    %config InlineBackend.figure_formats = set(['retina'])
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[3]:
  :END:

  #+BEGIN_SRC ipython
    import colorcet
    import matplotlib.pyplot as plt
    plt.rcParams['figure.facecolor'] = 'w'
    plt.rcParams['font.family'] = 'Nimbus Sans'
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[4]:
  :END:

* Results
** Visium

   Read the [[file:spatial-vae.org::*Visium][pre-processed data]]. Filter out
   genes with no observed data.

   #+BEGIN_SRC ipython
     dat = anndata.read_h5ad('/project2/mstephens/aksarkar/projects/singlecell-ideas/data/spatial/V1_Breast_Cancer_Block_A_Section_1/dat.h5ad')
     sc.pp.filter_genes(dat, min_cells=1)
     dat
   #+END_SRC

   #+RESULTS:
   :RESULTS:
   # Out[59]:
   #+BEGIN_EXAMPLE
     View of AnnData object with n_obs × n_vars = 3798 × 24865
     obs: 'barcode', 'in_tissue', 'row', 'col', 'pxl_row', 'pxl_col'
     var: 'gene', 'name', 'featuretype', 'n_cells'
   #+END_EXAMPLE
   :END:

   Fit a topic model, ignoring spatial information.

   #+BEGIN_SRC ipython :async t
     temp = dat.X.tocoo()
     y = matrix.sparseMatrix(i=pd.Series(temp.row + 1), j=pd.Series(temp.col + 1), x=pd.Series(temp.data), dims=pd.Series(temp.shape))
     res = fasttopics.fit_poisson_nmf(y, k=10, numiter=100, method='scd', control=rpy2.robjects.ListVector({'extrapolate': True}), verbose=True)
     res = fasttopics.poisson2multinom(res)
   #+END_SRC

   #+RESULTS:
   :RESULTS:
   # Out[60]:
   :END:

   Look at the loadings on each topic, spatially organized.

   #+BEGIN_SRC ipython :ipyfile figure/spatial-gom.org/visium-k-10.png
     plt.clf()
     fig, ax = plt.subplots(2, 5, sharex=True, sharey=True)
     fig.set_size_inches(7, 4)
     for k, a in enumerate(ax.ravel()):
       temp = ss.coo_matrix((res.rx2('L')[:,k], (dat.obs['row'], dat.obs['col'] // 2)), shape=(80, 64))
       a.imshow(temp.A, cmap=colorcet.cm['fire'])
       a.set_title(f'Topic {k + 1}')
       a.set_xticks([])
       a.set_yticks([])
     fig.tight_layout()
   #+END_SRC

   #+RESULTS:
   :RESULTS:
   # Out[62]:
   [[file:figure/spatial-gom.org/visium-k-10.png]]
   :END:

   Look at the top (highest probability) genes in each topic.

   #+BEGIN_SRC ipython
     pd.DataFrame({k: dat.var.iloc[np.argsort(-res.rx2('F')[:,k])[:10]]['name'].values for k in range(10)})
   #+END_SRC

   #+RESULTS:
   :RESULTS:
   # Out[63]:
   #+BEGIN_EXAMPLE
     0      1        2        3       4       5        6      7       8  \
     0     CD74   IGKC   IGFBP5    COX6C   COX6C  COL1A1    RPL41  COX6C     MGP
     1      FTL  IGHG3    RPL41    RPL41   KRT19  COL1A2     KRT8    B2M   RPL41
     2      B2M  IGHG4     KRT8     KRT8   RPL41     FN1    RPLP1  HLA-B  IGFBP5
     3     APOE  IGLC2    COX6C    KRT19  IGFBP5    ACTB    KRT18  HLA-A   KRT19
     4   TMSB10  IGHG1    RPLP1    RPL30    CPB1   SPARC    KRT19  IFI27   GAPDH
     5    RPL41  IGHA1    KRT18      MIF  TMSB10  MALAT1  S100A11  KRT19   RPL30
     6   TMSB4X  IGLC1     FTH1    SERF2   ACTG1  IGFBP7    RPL13   IFI6    TFF3
     7    HLA-B   IGHM  S100A11    RPLP1   RPL30     B2M    RPL30  HLA-C    FTH1
     8  HLA-DRA  IGLC3    KRT19    ACTG1   RPLP1  COL3A1     FTH1  ISG15  S100A6
     9    HLA-A  RPLP1    RPL30  SLC39A6   RPL13   RPLP1     MUC1   FTH1     MIF

     9
     0  KRT19
     1    FTL
     2   KRT8
     3  RPLP1
     4    MIF
     5   APOE
     6  SERF2
     7  CRIP1
     8  RPL13
     9  RPL41
   #+END_EXAMPLE
   :END:
